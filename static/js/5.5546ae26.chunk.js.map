{"version":3,"sources":["../node_modules/react-bootstrap/esm/Table.js","Component/Cart.js"],"names":["Table","React","ref","bsPrefix","className","striped","bordered","borderless","hover","size","variant","responsive","props","decoratedBsPrefix","useBootstrapPrefix","classes","classNames","table","_jsx","responsiveClass","children","Cartrow","dispatch","useDispatch","parseInt","index","item","name","quantity","onClick","type","payload","id","Parent","Child1","이름","Child2","나이","useEffect","console","log","memo","Cart","redux_store","useSelector","store","reducer","map","reducer2"],"mappings":"+PAuCeA,EAnCYC,cAAiB,WAWzCC,GAAQ,IAVTC,EAUS,EAVTA,SACAC,EASS,EATTA,UACAC,EAQS,EARTA,QACAC,EAOS,EAPTA,SACAC,EAMS,EANTA,WACAC,EAKS,EALTA,MACAC,EAIS,EAJTA,KACAC,EAGS,EAHTA,QACAC,EAES,EAFTA,WACGC,EACM,iBACHC,EAAoBC,YAAmBX,EAAU,SACjDY,EAAUC,IAAWZ,EAAWS,EAAmBH,GAAW,GAAJ,OAAOG,EAAP,YAA4BH,GAAWD,GAAQ,GAAJ,OAAOI,EAAP,YAA4BJ,GAAQJ,GAAW,GAAJ,OAAOQ,EAAP,YAAoCP,GAAY,GAAJ,OAAOO,EAAP,aAAqCN,GAAc,GAAJ,OAAOM,EAAP,eAAuCL,GAAS,GAAJ,OAAOK,EAAP,WAEvRI,EAAqBC,cAAK,QAAD,YAAC,eAAcN,GAAf,IAC7BR,UAAWW,EACXb,IAAKA,KAGP,GAAIS,EAAY,CACd,IAAIQ,EAAkB,GAAH,OAAMN,EAAN,eAMnB,MAJ0B,kBAAfF,IACTQ,EAAkB,GAAH,OAAMA,EAAN,YAAyBR,IAGtBO,cAAK,MAAO,CAC9Bd,UAAWe,EACXC,SAAUH,IAId,OAAOA,K,QC6CT,SAASI,EAAQT,GACb,IAAIU,EAAWC,cACnB,OACI,+BACA,6BAAMC,SAASZ,EAAMa,OAAO,IAC5B,6BAAMb,EAAMc,KAAKC,OACjB,6BAAMf,EAAMc,KAAKE,WACjB,+BACI,wBAAQC,QAAS,WAAMP,EAAS,CAACQ,KAAK,2BAAQC,QAAQ,CAACC,GAAGpB,EAAMc,KAAKM,OAArE,eADJ,WAGI,wBAAQH,QAAS,WAAMP,EAAS,CAACQ,KAAK,2BAAQC,QAAQ,CAACC,GAAGpB,EAAMc,KAAKM,OAArE,qBAkBR,SAASC,EAAOrB,GAChB,OACI,gCACI,cAACsB,EAAD,CAAQ,eAAItB,EAAMuB,eAClB,cAACC,EAAD,CAAQ,eAAIxB,EAAMyB,kBAI1B,SAASH,IAEL,OADAI,qBAAW,WAAMC,QAAQC,IAAI,gCACtB,uCAKX,IAAIJ,EAASK,gBAAK,WAEd,OADAH,qBAAW,WAAMC,QAAQC,IAAI,gCACtB,0CAGIE,UA9Hf,SAAc9B,GAIV,IAAI+B,EAAcC,aAAY,SAACC,GAAD,OAASA,KAEnCvB,EAAWC,cAgBnB,OACI,gCACA,eAAC,EAAD,CAAOlB,SAAO,EAACC,UAAQ,EAACE,OAAK,EAA7B,UACA,gCACI,+BACA,mCACA,oDACA,8CACA,mDAGJ,gCAGYmC,EAAYG,QAAQC,KAAI,SAACrB,EAAKD,GAC9B,OAAQ,cAACJ,EAAD,CAASK,KAAMA,EAAMD,MAAOA,EAAOH,SAAUA,YA4B7DqB,EAAYK,UACX,sBAAK5C,UAAU,YAAf,UACD,yGACA,wBAAQA,UAAU,kBAAkByB,QAzDxC,WACIP,EAAS,CAACQ,KAAK,kBAwDf,6BAKJ,cAACG,EAAD,CAAQ,eAAG,eAAK,eAAG","file":"static/js/5.5546ae26.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Table = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  striped,\n  bordered,\n  borderless,\n  hover,\n  size,\n  variant,\n  responsive,\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'table');\n  const classes = classNames(className, decoratedBsPrefix, variant && `${decoratedBsPrefix}-${variant}`, size && `${decoratedBsPrefix}-${size}`, striped && `${decoratedBsPrefix}-striped`, bordered && `${decoratedBsPrefix}-bordered`, borderless && `${decoratedBsPrefix}-borderless`, hover && `${decoratedBsPrefix}-hover`);\n\n  const table = /*#__PURE__*/_jsx(\"table\", { ...props,\n    className: classes,\n    ref: ref\n  });\n\n  if (responsive) {\n    let responsiveClass = `${decoratedBsPrefix}-responsive`;\n\n    if (typeof responsive === 'string') {\n      responsiveClass = `${responsiveClass}-${responsive}`;\n    }\n\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: responsiveClass,\n      children: table\n    });\n  }\n\n  return table;\n});\nexport default Table;","import React,{useEffect, memo} from 'react';\r\nimport {Table} from 'react-bootstrap';\r\nimport { connect, useDispatch, useSelector } from 'react-redux';\r\n\r\nfunction Cart(props){\r\n\r\n    //훅을 이용해서 사용하는 방법 - 최신문법\r\n    //REDUX 변수 얻어오기 - 신규 버전\r\n    let redux_store = useSelector((store)=>store)\r\n    // console.log(redux_store);    \r\n    let dispatch = useDispatch();\r\n    //훅을 이용해서 사용하는 방법 - 최신문법\r\n\r\n    //성능적인 이슈상 메모리할당이 지속적으로 필요가 없다.\r\n    //그래서 함수나 스타일을 선언해서 사용하는 부분을 지향\r\n    function banner_close(){\r\n        dispatch({type:'banner_close'});\r\n    }\r\n\r\n    //애니메이션의 경우는 \r\n    //되도록 margin, width, padding 같은 레이아웃 속성들을\r\n    //변경하면 렌더링 시간이 오래걸림\r\n    //transform 속성이나, opacity 속성 같은 부분 위주로 진행\r\n    //ex) rotate, scale, skew, translate 등\r\n\r\n\r\nreturn(\r\n    <div>\r\n    <Table striped bordered hover>\r\n    <thead>\r\n        <tr>\r\n        <th>#</th>\r\n        <th>상품명</th>\r\n        <th>수량</th>\r\n        <th>변경</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        {\r\n            // props.state.map((item,index)=>{                \r\n                redux_store.reducer.map((item,index)=>{ \r\n                return (<Cartrow item={item} index={index} dispatch={dispatch}/>)\r\n\r\n                // return(\r\n                // <tr>\r\n                // <td>{ parseInt(item.id)+1 }</td>\r\n                // <td>{ item.name }</td>\r\n                // <td>{ item.quan }</td>\r\n                // <td><button onClick={()=>{ props.dispatch({type:'수량증가'}) }}>+</button></td>\r\n                // </tr>  \r\n                // )\r\n            })\r\n        }\r\n    </tbody>\r\n    </Table>   \r\n    {\r\n        // props.alert열렸니?\r\n        \r\n        //이것도 맞고, 아래것도 맞음\r\n        //여긴 삼항연산자\r\n        // redux_store.reducer2?\r\n        // (<div className=\"my-alert2\">\r\n        // <p>지금 구매하시면 신규할인 20%</p>\r\n        // {/* <button className=\"btn btn-primary\" onClick={()=>{props.dispatch({type:'banner_close'})}}>닫기</button> */}\r\n        // <button className=\"btn btn-primary\" onClick={()=>{ dispatch({type:'banner_close'})}}>닫기</button>\r\n        // </div>)\r\n        // :null\r\n\r\n        //1===1 && 자료형\r\n        redux_store.reducer2 &&\r\n        (<div className=\"my-alert2\">\r\n        <p>지금 구매하시면 신규할인 20%</p>        \r\n        <button className=\"btn btn-primary\" onClick={banner_close}>닫기</button>\r\n        </div>)\r\n                \r\n    }\r\n\r\n    <Parent 이름=\"존박\" 나이=\"20\"></Parent>\r\n    </div>\r\n)\r\n}\r\n\r\nfunction Cartrow(props){    \r\n    let dispatch = useDispatch();\r\nreturn(\r\n    <tr>\r\n    <td>{ parseInt(props.index)+1 }</td>\r\n    <td>{ props.item.name }</td>\r\n    <td>{ props.item.quantity }</td>\r\n    <td>\r\n        <button onClick={()=>{ dispatch({type:'수량증가', payload:{id:props.item.id}}) }}>+</button>\r\n        &nbsp;&nbsp;\r\n        <button onClick={()=>{ dispatch({type:'수량감소', payload:{id:props.item.id}}) }}>-</button>\r\n    </td>\r\n    </tr>        \r\n)\r\n}\r\n\r\n//REDUX 변수 얻어오기 - 구 버전\r\n// function state를props화(state){\r\n//     return {\r\n//         // 상품명 : state.name\r\n//         state :  state.reducer,\r\n//         alert열렸니: state.reducer2\r\n//     }\r\n// }\r\n// export default connect(state를props화)(Cart)\r\n\r\n\r\n\r\nfunction Parent(props){\r\nreturn (\r\n    <div>\r\n        <Child1 이름={props.이름}/>\r\n        <Child2 나이={props.나이}/> \r\n    </div>\r\n)\r\n}\r\nfunction Child1(){\r\n    useEffect( ()=>{ console.log('렌더링됨1') } );\r\n    return <div>1111</div>\r\n}\r\n//memo()의 단점\r\n//기존 props 와 바뀐 props 를 비교연산 후\r\n//컴포넌트 업데이트를 할지 말지 결정함\r\nlet Child2 = memo(function(){\r\n    useEffect( ()=>{ console.log('렌더링됨2') } );\r\n    return <div>2222</div>\r\n});\r\n\r\nexport default Cart;\r\n\r\n\r\n"],"sourceRoot":""}