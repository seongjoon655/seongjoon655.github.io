{"version":3,"sources":["Component/Detail.js"],"names":["박스","styled","div","제목","h4","props","색상","React","Component","Recentview_li","redux_store","useSelector","store","dispatch","useDispatch","useEffect","console","log","shoes_detail","title","type","payload","className","reducer3","map","item","index","TabContent","스위치변경","tabidx","Info","재고","Myalet","DetailPage","nodeRef","useRef","useState","is_alert","is_alert_fn","inputData","inputData_fn","tabidx_fn","스위치","sharedata","useContext","재고context","timer","setTimeout","clearTimeout","id","useParams","history","useHistory","shoes","find","shoes_url","parseInt","onChange","e","target","value","src","width","content","price","onClick","사본재고","재고변경","name","quantity","push","goBack","variant","defaultActiveKey","Item","Link","eventKey","in","classNames","timeout"],"mappings":"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","file":"static/js/4.2e98a700.chunk.js","sourcesContent":["import React, {useContext, useEffect, useState} from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport '../scss/Detail.scss';\r\nimport {재고context} from '../App.js';\r\nimport { Nav } from 'react-bootstrap';\r\n//애니메이션\r\nimport {CSSTransition} from 'react-transition-group';\r\n//리덕스\r\nimport { connect, useDispatch, useSelector } from 'react-redux';\r\n\r\n\r\n\r\nlet 박스 = styled.div`\r\n    padding: 20px;\r\n`;\r\nlet 제목 = styled.h4`    \r\n    font-size : 25px;\r\n    color: ${props => props.색상};\r\n`;\r\n\r\nclass Detail2 extends React.Component{\r\n    componentDidMount(){\r\n        //컴포넌트가 Mount 되었을때 실행할 코드 (렌더링 될때)\r\n        //주로 Ajax 같은 것도 이런 곳에서 자주 사용\r\n    }\r\n    componentWillUnmount(){\r\n        //컴포넌트가 Unmount 되었을때 실행할 코드 (사라질 때)\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction DetailPage(props){\r\n    let redux_store = useSelector((store)=>store);\r\n    let dispatch = useDispatch();\r\n\r\n//아래 오류해결\r\n//static 하게 사용하면 안된다고 하는데.. 정확한 이유는 아직 모르겠음\r\n//Warning: findDOMNode is deprecated in StrictMode. \r\n//findDOMNode was passed an instance of Transition which is inside StrictMode. \r\n//Instead, add a ref directly to the element you want to reference. \r\n//Learn more about using refs safely here: \r\n//https://reactjs.org/link/strict-mode-find-node\r\n\r\n//해결방법\r\n//선언 후 하기 컴포넌트에서 전달\r\n    const nodeRef = React.useRef(null);\r\n//해결방법    \r\n\r\n    let [is_alert,is_alert_fn] = useState(true);\r\n    let [inputData, inputData_fn] = useState('');\r\n    let [tabidx,tabidx_fn] = useState(0);\r\n    let [스위치,스위치변경] = useState(false);\r\n\r\n    //공유CONTEXT\r\n    let sharedata = useContext(재고context);\r\n\r\n    useEffect(()=>{\r\n        //컴포넌트가 mount 되었을 때\r\n        //컴포넌트가 update 될 때        \r\n        let timer = setTimeout(()=>{            \r\n            // const alert_box =  document.getElementsByClassName('.my-alert my-alert2');\r\n            // const alert_box =  document.querySelector('.my-alert my-alert2');\r\n            //alert_box.setAttribute('style','display:none');\r\n            // alert_box.style.display='none';            \r\n            is_alert_fn(false);\r\n        },2000);\r\n        // return function closerAction(){ alert('unmount') }\r\n        return ()=>{ console.log('closer action'); clearTimeout(timer);  }\r\n    },[]);\r\n\r\n    let {id} = useParams();\r\n    let history = useHistory();\r\n    const shoes_detail = props.shoes.find((item)=>{ return item.id==id; });\r\n    const shoes_url = `https://codingapple1.github.io/shop/shoes${(parseInt(id)+1)}.jpg`;\r\n\r\n    //console.log(shoes_detail);\r\n\r\n    const 재고 = props.재고;\r\n\r\n    return(\r\n        <div>\r\n        <Recentview_li shoes_detail={shoes_detail} />\r\n        <div className=\"container\">                    \r\n            <div>공유CONEXTE문법 : {sharedata[0]}</div>\r\n            <박스>\r\n                <제목 색상={'tomato'} >Product</제목>\r\n                <제목 className=\"red\" >Detail</제목>\r\n            </박스>\r\n\r\n            {inputData}\r\n            <input onChange={(e)=>{\r\n                inputData_fn(e.target.value);\r\n            }} />\r\n\r\n            {\r\n                is_alert\r\n                ?\r\n                <Myalet />:null\r\n            }\r\n            <div className=\"row\">\r\n            <div className=\"col-md-6\">\r\n                <img src={shoes_url} width=\"100%\" />\r\n            </div>\r\n            <div className=\"col-md-6 mt-4\">\r\n                <h4 className=\"pt-5\">{shoes_detail.title}</h4>\r\n                <p>{shoes_detail.content}</p>\r\n                <p>{shoes_detail.price}</p>\r\n\r\n                <Info 재고={재고[id]} />\r\n\r\n                <button className=\"btn btn-danger\" onClick={()=>{\r\n                    let 사본재고 = [...재고];\r\n                    // console.log(사본재고);\r\n                    사본재고[id] = 사본재고[id]-1;\r\n                    // console.log(사본재고[0]);\r\n                    // props.재고변경([9,10,11]);\r\n                    props.재고변경(사본재고);\r\n\r\n\r\n                    //props.dispatch({type:'shoes-order',payload:{id:shoes_detail.id,name:shoes_detail.title,quantity:1}})\r\n                    dispatch({type:'shoes-order',payload:{id:shoes_detail.id,name:shoes_detail.title,quantity:1}})\r\n                    history.push('/cart');\r\n                }}\r\n                >주문하기</button>\r\n                &nbsp;\r\n                <button className=\"btn btn-danger\" onClick={()=>{ \r\n                    history.goBack();\r\n                    // history.push('/');\r\n                }}>뒤로가기</button>\r\n            </div>\r\n            </div>\r\n        </div>\r\n\r\n        <Nav className=\"mt-5\" variant=\"tabs\" defaultActiveKey=\"link-0\">\r\n            <Nav.Item>\r\n            <Nav.Link eventKey=\"link-0\" onClick={()=>{스위치변경(false); tabidx_fn(0)}}>정보</Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n            <Nav.Link eventKey=\"link-1\" onClick={()=>{스위치변경(false); tabidx_fn(1)}}>상세</Nav.Link>\r\n            </Nav.Item>\r\n        </Nav>\r\n\r\n        {/* 해결방법 */}\r\n        <CSSTransition nodeRef={nodeRef}  in={스위치} classNames=\"wow\" timeout={500}>\r\n            <TabContent nodeRef={nodeRef} tabidx={tabidx} 스위치변경={스위치변경}/>\r\n        </CSSTransition>\r\n        {/* 해결방법 */}\r\n\r\n\r\n        </div>\r\n    )\r\n}   \r\n\r\n\r\n\r\nfunction Recentview_li(props){\r\n    let redux_store = useSelector((store)=>store);\r\n    let dispatch = useDispatch();\r\n    useEffect(()=>{\r\n        console.log('action-call : '+ props.shoes_detail.title);\r\n        dispatch({type:'add-vlist', payload:{title:props.shoes_detail.title}})        \r\n        // dispatch({type:'add-vlist', payload:{name:'test'}})\r\n    },[]);\r\n\r\n    return(\r\n        <div className=\"absol-box\">\r\n        <p>최근본상품</p>\r\n        {\r\n            redux_store.reducer3.map((item,index)=>{\r\n            //     return <div>{index}.{item} </div>\r\n                return    <div>{item}</div>\r\n            })\r\n        }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nfunction TabContent(props){\r\n\r\n    useEffect(()=>{\r\n        props.스위치변경(true);\r\n    });\r\n\r\n    const tabidx = props.tabidx\r\n    //이것도 맞고, 아래의 object 자료형을 응용한 enum 형태도 맞음\r\n    //또한 enum 에서의 object 를 \r\n    //따로 외부 객체 형태의 변수로 빼서 사용도 가능\r\n    //ex-------------------------------\r\n    //선언\r\n    // var 탭UI = { \r\n    //     info : <p>상품정보</p>,\r\n    //     shipping : <p>배송관련</p>,\r\n    //     refund : <p>환불약관</p>\r\n    //   }\r\n    //사용\r\n    //   <div>\r\n    //   {\r\n    //     탭UI[현재상태]\r\n    //   }\r\n    // </div>\r\n\r\n\r\n    // switch(parseInt(tabidx)){\r\n    //     case 0:\r\n    //         return <div>상품설명</div>\r\n    //     case 1:\r\n    //         return <div>배송정보</div>\r\n    //     default:\r\n    //         return <div>상품설명</div>\r\n    // }    \r\n    \r\n    return(\r\n        {\r\n            0:<div>상품설명</div>,\r\n            1:<div>배송정보</div>\r\n        }[tabidx]\r\n    )\r\n}\r\n\r\n\r\nfunction Info(props){\r\n    return (\r\n        <p>재고 : {props.재고}</p>\r\n    )\r\n}\r\n\r\n\r\nfunction Myalet(){\r\n    return(\r\n        <div className=\"my-alert my-alert2\">\r\n            <p>재고가 얼마 남지 않았습니다</p>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n// function reduceProvider(state){\r\n//     console.log(state);\r\n//     return {     \r\n//         state :  state.reducer,\r\n//         alert열렸니: state.reducer2,\r\n//         //vlist : state.reducer3\r\n//     }\r\n// }\r\n\r\n\r\n// export default connect(reduceProvider)(DetailPage);\r\n\r\nexport default DetailPage;"],"sourceRoot":""}